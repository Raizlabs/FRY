//
//  FRYKeyplaneView+Private.h
//  FRY
//
//  Created by Brian King on 11/9/14.
//  Copyright (c) 2014 Raizlabs. All rights reserved.
//

#import <UIKit/UIKit.h>

/**
 * It's a pain to bring "type safety" to private classes.  These are the private classes, with the FRY prefix instead of UI.
 * These classes never actually exist, but we cast to them to get some help from the compiler.
 */

@interface FRYKBKeyTree : NSObject

@property(retain, nonatomic) NSString *layoutTag; // @synthesize layoutTag;
@property(retain, nonatomic) NSMutableDictionary *cache; // @synthesize cache;
@property(retain, nonatomic) NSMutableArray *subtrees; // @synthesize subtrees;
@property(retain, nonatomic) NSMutableDictionary *properties; // @synthesize properties;
@property(retain, nonatomic) NSString *name; // @synthesize name;
@property(nonatomic) int type; // @synthesize type;
- (BOOL)renderKeyInKeyplane:(id)arg1;
- (BOOL)_renderAsStringKey;
- (id)cacheDisplayString;
- (BOOL)shouldCacheKey;
- (BOOL)hasLayoutTag:(id)arg1;
- (id)variantDisplayString;
- (void)orderVariantKeys:(BOOL)arg1;
- (BOOL)behavesAsShiftKey;
- (BOOL)canFadeOut;
- (BOOL)modifiesKeyplane;
- (BOOL)avoidsLanguageIndicator;
- (void)setForceMultitap:(BOOL)arg1;
- (BOOL)forceMultitap;
- (void)setClipCorners:(int)arg1;
- (int)clipCorners;
- (void)setSplitMode:(int)arg1;
- (int)splitMode;
- (void)setDisabled:(BOOL)arg1;
- (BOOL)disabled;
- (void)setFlickDirection:(int)arg1;
- (int)flickDirection;
- (id)variantPopupBias;
- (void)setVariantPopupBias:(id)arg1;
- (void)setGhost:(BOOL)arg1;
- (BOOL)ghost;
- (void)setVisible:(BOOL)arg1;
- (BOOL)visible;
- (void)setOverrideDisplayString:(id)arg1;
- (id)overrideDisplayString;
- (void)setRendering:(int)arg1;
- (int)rendering;
- (void)setDisplayRowHint:(int)arg1;
- (int)displayRowHint;
- (void)setTextAlignment:(int)arg1;
- (int)textAlignment;
- (void)setHighlightedVariantIndex:(int)arg1;
- (int)highlightedVariantIndex;
- (void)setDisplayTypeHint:(int)arg1;
- (int)displayTypeHint;
- (void)setVariantType:(int)arg1;
- (int)variantType;
- (void)setInteractionType:(int)arg1;
- (int)interactionType;
- (void)setDisplayType:(int)arg1;
- (int)displayType;
- (id)localizationKey;
- (void)setDisplayString:(id)arg1;
- (id)displayString;
- (id)fullRepresentedString;
- (void)setRepresentedString:(id)arg1;
- (id)representedString;
- (void)updateVariantTypeForActions:(unsigned int)arg1;
- (int)_variantType;
- (void)setState:(int)arg1;
- (int)state;
- (id)attributeSet:(BOOL)arg1;
- (id)geometrySet:(BOOL)arg1;
- (id)keySet;
- (void)updateMoreAndInternationalKeysWithOptions:(int)arg1;
- (void)updateDictationKeyOnNumberPads:(BOOL)arg1;
- (id)findLeftMoreKey;
- (struct CGRect)frameForKeylayoutName:(id)arg1;
- (BOOL)looksLike:(id)arg1;
- (BOOL)supportsType:(int)arg1;
- (id)autolocalizedKeyCacheIterator;
- (BOOL)isSplit;
- (void)setIsGenerated:(BOOL)arg1;
- (BOOL)isGenerated;
- (BOOL)isLetters;
- (BOOL)looksLikeShiftAlternate;
- (BOOL)usesKeyCharging;
- (BOOL)usesAdaptiveKeys;
- (BOOL)isShiftKeyPlaneChooser;
- (BOOL)noLanguageIndicator;
- (BOOL)notUseCandidateSelection;
- (BOOL)shouldSkipCandidateSelectionForVariants;
- (BOOL)shouldSkipCandidateSelection;
- (BOOL)isAlphabeticPlane;
- (BOOL)isShiftKeyplane;
- (id)shiftAlternateKeyplaneName;
- (id)alternateKeyplaneName;
- (BOOL)usesAutoShift;
- (id)keysWithString:(id)arg1;
- (id)keysByKeyName:(id)arg1;
- (id)geometriesOrderedByPosition;
- (id)keysOrderedByPosition;
- (id)keysOrderedByPositionWithoutZip;
- (void)clearTransientCaches;
- (id)keyAttributes;
- (id)geometries;
- (id)keys;
- (void)setAttributes:(id)arg1;
- (id)keyplaneForKey:(id)arg1;
- (id)keyForString:(id)arg1;
- (void)precacheLayoutName:(id)arg1;
- (id)layoutName;
- (void)cacheKey:(id)arg1;
- (id)_cacheRootNameForKey:(id)arg1;
- (id)firstCachedKeyWithName:(id)arg1;
- (id)cachedKeysByKeyName:(id)arg1;
- (void)setVisualStyle:(int)arg1;
- (int)visualStyle;
- (void)setFrameOnly:(struct CGRect)arg1;
- (void)setPaddedFrame:(struct CGRect)arg1;
- (struct CGRect)paddedFrame;
- (void)setFrame:(struct CGRect)arg1;
- (struct CGRect)frame;
- (struct CGRect)_keyplaneFrame;
- (void)setGeometry:(id)arg1;
- (id)geometry;
- (void)setShape:(id)arg1;
- (id)shape;
- (BOOL)subtreesAreOrdered;
- (BOOL)isLeafType;
- (void)zipAttributes;
- (void)zipGeometrySet;
- (void)zipGeometries:(BOOL)arg1 attributes:(BOOL)arg2;
- (BOOL)_needsScaling;
- (int)indexOfSubtree:(id)arg1;
- (id)subtreesWithProperty:(id)arg1 value:(id)arg2;
- (id)subtreeWithName:(id)arg1 rows:(id)arg2;
- (id)subtreeWithName:(id)arg1;
- (id)subtreeWithType:(int)arg1;
- (id)recursiveDescription;
- (id)description;
- (id)numberForProperty:(id)arg1;
- (BOOL)boolForProperty:(id)arg1;
- (int)intForProperty:(id)arg1;
- (id)stringForProperty:(id)arg1;
- (BOOL)setObject:(id)arg1 forProperty:(id)arg2;
- (BOOL)isDuplicateOfTree:(id)arg1;
- (BOOL)isEqualToTree:(id)arg1;
- (BOOL)isSameAsTree:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)initWithType:(int)arg1 withName:(id)arg2 withProperties:(id)arg3 withSubtrees:(id)arg4 withCache:(id)arg5;
- (id)initWithType:(int)arg1;
- (BOOL)isHashed;
- (id)componentName;
- (id)unhashedName;
- (id)nameFromAttributes;

@end

@interface FRYKBKeyplane : NSObject

- (BOOL)isShiftKeyplane;

- (NSArray *)keys;

@end

@interface FRYKeyboardLayoutStar : UIView

+ (struct CGSize)keyboardSizeForInputMode:(id)arg1 screenTraits:(id)arg2;
+ (id)keyboardWithName:(id)arg1 screen:(id)arg2;
+ (id)keyboardFromFactoryWithName:(id)arg1 screen:(id)arg2;
//@property(retain, nonatomic) UIKBRenderConfig *renderConfig; // @synthesize renderConfig=_renderConfig;
@property(copy, nonatomic) NSString *preTouchKeyplaneName; // @synthesize preTouchKeyplaneName=_preTouchKeyplaneName;
@property(nonatomic) int playKeyClickSoundOn; // @synthesize playKeyClickSoundOn;
@property(copy, nonatomic) NSString *localizedInputKey; // @synthesize localizedInputKey=_localizedInputKey;
@property(readonly, nonatomic) BOOL showDictationKey; // @synthesize showDictationKey=_showDictationKey;
@property(nonatomic) BOOL showIntlKey; // @synthesize showIntlKey=_showIntlKey;
@property(nonatomic) BOOL didLongPress; // @synthesize didLongPress=_didLongPress;
@property(nonatomic) BOOL autoShift; // @synthesize autoShift=_autoshift;
@property(nonatomic) BOOL shift; // @synthesize shift=_shift;
//@property(retain, nonatomic) UIKBTree *activeKey; // @synthesize activeKey=_activeKey;
@property(copy, nonatomic) NSString *keyplaneName; // @synthesize keyplaneName=_keyplaneName;
@property(copy, nonatomic) NSString *keyboardName; // @synthesize keyboardName=_keyboardName;
@property(readonly, nonatomic) FRYKBKeyTree *keyplane; // @synthesize keyplane=_keyplane;
@property(readonly, nonatomic) FRYKBKeyTree *keyboard; // @synthesize keyboard=_keyboard;
- (id)simulateTouchForCharacter:(id)arg1 errorVector:(struct CGPoint)arg2 shouldTypeVariants:(BOOL)arg3 baseKeyForVariants:(BOOL)arg4;
- (id)simulateTouch:(struct CGPoint)arg1;
- (struct CGPoint)applyError:(struct CGPoint)arg1 toKey:(id)arg2;
- (void)changeToKeyplane:(id)arg1;
- (id)keyplaneNamed:(id)arg1;
- (FRYKBKeyTree *)keyplaneForKey:(FRYKBKeyTree *)arg1;

- (FRYKBKeyTree *)baseKeyForString:(NSString *)arg1;
- (FRYKBKeyTree *)keyWithRepresentedString:(id)arg1;

- (BOOL)shouldRetestKey:(id)arg1 withKeyplane:(id)arg2;
- (id)scriptingInfoWithChildren;
- (void)didRotate;
- (void)willRotate;
- (void)updateKeyCentroids;
- (BOOL)isShiftKeyBeingHeld;
- (void)setAutoshift:(BOOL)arg1;
- (void)updateShiftKeyState;
- (int)stateForShiftKey:(id)arg1;
- (BOOL)isAlphabeticPlane;
- (BOOL)ignoresShiftState;
- (BOOL)usesAutoShift;
- (void)upActionShift;
- (void)downActionShiftWithKey:(id)arg1;
- (unsigned int)upActionFlagsForKey:(id)arg1;
- (unsigned int)downActionFlagsForKey:(id)arg1;
- (BOOL)keyHasAccentedVariants:(id)arg1;
- (id)activeTouchForInteraction:(int)arg1;
- (id)touchForKey:(id)arg1;
- (void)clearAllTouchInfo;
- (void)clearInfoForTouch:(id)arg1;
- (void)cancelTouchIfNecessaryForInfo:(id)arg1;
- (id)generateInfoForTouch:(id)arg1;
- (id)infoForTouch:(id)arg1;
- (void)swipeDetected:(id)arg1;
- (void)uninstallGestureRecognizers;
- (void)installGestureRecognizers;
- (BOOL)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (BOOL)gestureRecognizerShouldBegin:(id)arg1;
- (void)touchCancelled:(id)arg1 executionContext:(id)arg2;
- (void)completeSendStringActionForTouchUp:(id)arg1 withActions:(int)arg2 timestamp:(double)arg3 interval:(double)arg4 didLongPress:(BOOL)arg5 prevActions:(int)arg6;
- (void)completeRetestForTouchUp:(id)arg1 timestamp:(double)arg2 interval:(double)arg3 executionContext:(id)arg4;
- (BOOL)shouldSendTouchUpToInputManager:(id)arg1;
- (void)touchUp:(id)arg1 executionContext:(id)arg2;
- (void)handleDelayedCentroidUpdate;
- (void)cancelDelayedCentroidUpdate;
- (void)refreshGhostKeyState;
- (BOOL)performSpaceAction;
- (BOOL)performReturnAction;
- (void)completeHitTestForTouchDragged:(id)arg1 hitKey:(id)arg2;
- (void)touchDragged:(id)arg1 executionContext:(id)arg2;
- (BOOL)canForceTouchCommit:(id)arg1;
- (void)completeDeleteActionForTouchDownWithActions:(unsigned int)arg1 executionContext:(id)arg2;
- (void)completeSendStringActionForTouchDownWithKey:(id)arg1 withActions:(unsigned int)arg2 executionContext:(id)arg3;
- (void)completeCommitTouchesPrecedingTouchDownWithKey:(id)arg1 withActions:(unsigned int)arg2 executionContext:(id)arg3;
- (BOOL)shouldCommitPrecedingTouchesForTouchDownWithActions:(unsigned int)arg1;
- (void)touchDownWithKey:(id)arg1 atPoint:(struct CGPoint)arg2 executionContext:(id)arg3;
- (BOOL)shouldSkipResponseToGlobeKey:(id)arg1 atPoint:(struct CGPoint)arg2;
- (void)playKeyClickSound;
- (void)completeHitTestForTouchDown:(id)arg1 executionContext:(id)arg2;
- (void)touchDown:(id)arg1 executionContext:(id)arg2;
//- (BOOL)pointInside:(struct CGPoint)arg1 forEvent:(struct __GSEvent *)arg2;
- (float)hitBuffer;
- (void)setSplit:(BOOL)arg1 animated:(BOOL)arg2;
- (void)_autoSplit:(id)arg1;
- (void)setSplitProgress:(float)arg1;
- (void)interpretTouchesForSplit;
- (BOOL)pinchSplitGestureEnabled;
- (BOOL)pinchDetected;
- (void)finishSplitTransitionWithProgress:(float)arg1;
- (void)finishSplitTransition;
- (void)finishSplit;
- (void)showSplitTransitionView:(BOOL)arg1;
- (void)prepareForSplitTransition;
- (float)interpretPinchSeparationValues;
- (id)activationIndicatorView;
- (BOOL)shouldShowIndicator;
- (void)showPopupVariantsForKey:(id)arg1;
- (id)_keyplaneVariantsKeyForString:(id)arg1;
- (void)longPressAction;
- (BOOL)isLongPressedKey:(id)arg1;
- (BOOL)isShiftKeyPlaneChooser;
- (void)restoreDefaultsForAllKeys;
- (void)restoreDefaultsForKey:(id)arg1;
- (void)setLongPressAction:(SEL)arg1 forKey:(id)arg2;
- (void)setAction:(SEL)arg1 forKey:(id)arg2;
- (void)setTarget:(id)arg1 forKey:(id)arg2;
- (void)setLabel:(id)arg1 forKey:(id)arg2;
- (void)setLayoutTag:(id)arg1;
- (void)didClearInput;
- (void)touchMultitapTimer;
- (void)cancelMultitapTimer;
- (void)handleMultitapTimerFired;
- (void)multitapExpired;
- (void)multitapInterrupted;
- (BOOL)canMultitap;
- (id)multitapCompleteKey;
- (BOOL)hasAccentKey;
- (BOOL)hasCandidateKeys;
- (id)candidateList;
- (void)deleteActionWithExecutionContext:(id)arg1;
- (void)deleteHandwritingStrokesAtIndexes:(id)arg1;
- (void)clearHandwritingStrokesIfNeeded;
- (id)createKeyEventForStringAction:(id)arg1 forKey:(id)arg2 isPopupVariant:(BOOL)arg3 isMultitap:(BOOL)arg4 isFlick:(BOOL)arg5;
- (void)performHitTestForTouchInfo:(id)arg1 touchStage:(int)arg2 hitKeyHandler:(id)arg3 executionContext:(void)arg4;
- (int)keycodeForKey:(id)arg1;
- (BOOL)shouldPreventInputManagerHitTestingForKey:(id)arg1;
- (id)keyHitTest:(struct CGPoint)arg1;
- (id)keyHitTestWithoutCharging:(struct CGPoint)arg1;
- (id)keyHitTestClosestToPoint:(struct CGPoint)arg1;
- (id)keyHitTestContainingPoint:(struct CGPoint)arg1;
- (BOOL)shouldHitTestKey:(id)arg1;
- (void)deactivateActiveKeys;
- (void)deactivateActiveKeysClearingTouchInfo:(BOOL)arg1 clearingDimming:(BOOL)arg2;
- (id)initialKeyplaneNameWithKBStarName:(id)arg1;
- (void)showKeyboardWithInputTraits:(id)arg1 screenTraits:(id)arg2;
- (id)cacheTokenForKeyplane:(id)arg1;
- (id)cacheIdentifierForKeyplaneNamed:(id)arg1;
- (void)setState:(int)arg1 forKey:(id)arg2;
- (int)stateForKey:(id)arg1;
- (void)refreshForDictationAvailablityDidChange;
- (void)updateMoreAndInternationalKeys;
- (int)stateForKeyplaneSwitchKey:(id)arg1;
- (int)stateForDictationKey:(id)arg1;
- (int)stateForMultitapReverseKey:(id)arg1;
- (int)displayTypeHintForShiftKey;
- (int)displayTypeHintForMoreKey;
- (void)setCurrencyKeysForCurrentLocaleOnKeyplane:(id)arg1;
- (void)setReturnKeyEnabled:(BOOL)arg1 withDisplayName:(id)arg2 withType:(int)arg3;
- (void)updateTransitionWithFlags:(int)arg1;
- (void)updateGlobeKeyDisplayString;
- (BOOL)canReuseKeyplaneView;
- (BOOL)shouldShowDictationKey;
- (void)updateBackgroundIfNeeded;
- (BOOL)handwritingPlane;
- (struct CGImage *)renderedKeyplaneWithToken:(id)arg1 split:(BOOL)arg2;
- (struct CGImage *)renderedImageWithToken:(id)arg1;
- (struct CGImage *)renderedImageWithStateFallbacksForToken:(id)arg1;
- (void)rebuildSplitTransitionView;
- (void)rebuildSplitTransitionViewFromKeyplane:(id)arg1 toKeyplane:(id)arg2;
- (void)updateLocalizedKeys:(BOOL)arg1;
- (void)updateLocalizedKeysOnKeyplane:(id)arg1;
- (BOOL)canProduceString:(id)arg1;
- (double)lastTouchUpTimestamp;
- (void)setKeyboardName:(id)arg1 appearance:(int)arg2;
- (void)updateKeyboardForKeyplane:(id)arg1;
- (void)setKeyboardAppearance:(int)arg1;
- (int)visualStyleForKeyboardIfSplit:(BOOL)arg1;
- (void)refreshForRivenPreferences;
- (struct CGRect)frameForKeylayoutName:(id)arg1;
- (struct CGRect)frameForKeylayoutName:(id)arg1 onKeyplaneName:(id)arg2;
- (struct CGSize)dragGestureSize;
- (id)defaultKeyplaneForKeyplane:(id)arg1;
- (id)splitNameForKeyplane:(id)arg1;
- (id)splitNameForKeyplaneName:(id)arg1;
- (id)defaultNameForKeyplaneName:(id)arg1;
@property(readonly, nonatomic) NSString *localizedInputMode;
- (SEL)handlerForNotification:(id)arg1;
- (void)flushKeyCache:(id)arg1;
- (void)removeFromSuperview;
- (void)clearUnusedObjects:(BOOL)arg1;
- (void)willMoveToWindow:(id)arg1;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;
@property(readonly, nonatomic, getter=isRotating) BOOL rotating;
- (void)setKeyForTouchInfo:(id)arg1 key:(id)arg2;
- (id)popupKeyViews;
- (struct CGRect)frameForLastKeyWithRepresentedString:(id)arg1;
- (struct CGRect)frameForKeyWithRepresentedString:(id)arg1;
- (void)resizeForKeyplaneSize:(struct CGSize)arg1;
- (void)activateCompositeKey:(id)arg1 direction:(int)arg2 flickString:(id)arg3 popupInfo:(id)arg4;
- (void)showPopupView:(int)arg1 withKey:(id)arg2 popupInfo:(id)arg3 force:(BOOL)arg4;
- (void)setKeyboardDim:(BOOL)arg1;
- (void)setKeyboardDim:(BOOL)arg1 amount:(float)arg2 withDuration:(float)arg3;
- (void)handleDismissFlickView;
- (void)handleDismissFlickView:(id)arg1;
- (void)handlePopupView;
- (void)handlePopupView:(id)arg1;
- (id)overlayCharacterImageForKey:(id)arg1 direction:(int)arg2 rect:(struct CGRect)arg3 flickString:(id)arg4 popupInfo:(id)arg5;
- (id)getFlickCompositeImageForKey:(id)arg1 direction:(int)arg2 rect:(struct CGRect)arg3;
- (id)getPopupBackgroundImageForKey:(id)arg1 direction:(int)arg2 popupInfo:(id)arg3 rect:(struct CGRect)arg4;
- (id)compositeImageForKey:(id)arg1;
- (void)setCompositeImage:(id)arg1 forKey:(id)arg2;
- (void)showFlickView:(int)arg1 withKey:(id)arg2 flickString:(id)arg3;
- (void)handleFlick:(id)arg1;
- (void)populateFlickPopupsForKey:(id)arg1;
- (id)flickStringForInputKey:(id)arg1 direction:(int)arg2;
- (id)flickPopupStringForKey:(id)arg1 withString:(id)arg2;

@end
